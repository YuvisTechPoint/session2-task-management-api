openapi: 3.0.3
info:
  title: Personal Task Management API
  description: A comprehensive RESTful API for personal task management with advanced analytics - Built for Keploy API Fellowship Session 4
  version: 1.0.0
  contact:
    name: API Fellowship Session 4
    email: support@example.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:5000
    description: Local development server
  - url: https://your-api-domain.com
    description: Production server

tags:
  - name: Health
    description: Health check endpoints
  - name: Users
    description: User management and authentication
  - name: Tasks
    description: Task management operations
  - name: Categories
    description: Category management
  - name: Analytics
    description: Analytics and reporting

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check endpoint
      description: Check the health status of the API
      responses:
        '200':
          description: API is healthy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'

  /:
    get:
      tags:
        - Health
      summary: Welcome endpoint
      description: Get API information and available endpoints
      responses:
        '200':
          description: API information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WelcomeResponse'

  /api/v1/users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve all users with filtering and pagination
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          description: Number of items per page
          schema:
            type: integer
            default: 10
        - name: role
          in: query
          description: Filter by user role
          schema:
            type: string
            enum: [user, admin, manager]
        - name: search
          in: query
          description: Search in name, email, or department
          schema:
            type: string
      responses:
        '200':
          description: Users retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersResponse'

  /api/v1/users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '404':
          description: User not found

  /api/v1/users/register:
    post:
      tags:
        - Users
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistration'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /api/v1/users/login:
    post:
      tags:
        - Users
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'

  /api/v1/tasks:
    get:
      tags:
        - Tasks
      summary: Get all tasks
      description: Retrieve all tasks with filtering, sorting, and pagination
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
        - name: status
          in: query
          schema:
            type: string
            enum: [pending, in-progress, completed, cancelled]
        - name: priority
          in: query
          schema:
            type: string
            enum: [low, medium, high, urgent]
        - name: search
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Tasks retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TasksResponse'

    post:
      tags:
        - Tasks
      summary: Create new task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

  /api/v1/tasks/{id}:
    get:
      tags:
        - Tasks
      summary: Get task by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

    put:
      tags:
        - Tasks
      summary: Update task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'

    delete:
      tags:
        - Tasks
      summary: Delete task
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Task deleted successfully

  /api/v1/categories:
    get:
      tags:
        - Categories
      summary: Get all categories
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Categories retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesResponse'

    post:
      tags:
        - Categories
      summary: Create new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryCreate'
      responses:
        '201':
          description: Category created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'

  /api/v1/analytics/dashboard:
    get:
      tags:
        - Analytics
      summary: Get analytics dashboard
      parameters:
        - name: timeframe
          in: query
          schema:
            type: string
            enum: [7d, 30d, 90d, 1y]
            default: 30d
      responses:
        '200':
          description: Analytics data retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalyticsResponse'

components:
  schemas:
    HealthResponse:
      type: object
      properties:
        status:
          type: string
          example: "OK"
        timestamp:
          type: string
          format: date-time
        uptime:
          type: string
        memory:
          type: object
        database:
          type: string
        version:
          type: string

    WelcomeResponse:
      type: object
      properties:
        message:
          type: string
        version:
          type: string
        endpoints:
          type: object

    User:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [user, admin, manager]
        department:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

    UserRegistration:
      type: object
      required:
        - name
        - email
        - password
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 6
        role:
          type: string
          enum: [user, admin, manager]
          default: user
        department:
          type: string

    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          type: object
          properties:
            user:
              $ref: '#/components/schemas/User'
            token:
              type: string

    Task:
      type: object
      properties:
        _id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [pending, in-progress, completed, cancelled]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        dueDate:
          type: string
          format: date-time
        estimatedHours:
          type: number
        actualHours:
          type: number
        assignedTo:
          $ref: '#/components/schemas/User'
        category:
          $ref: '#/components/schemas/Category'
        createdAt:
          type: string
          format: date-time

    TaskCreate:
      type: object
      required:
        - title
        - dueDate
        - assignedTo
        - category
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        status:
          type: string
          enum: [pending, in-progress, completed, cancelled]
          default: pending
        priority:
          type: string
          enum: [low, medium, high, urgent]
          default: medium
        dueDate:
          type: string
          format: date-time
        estimatedHours:
          type: number
          minimum: 0.5
          maximum: 40
        assignedTo:
          type: string
        category:
          type: string

    TaskUpdate:
      type: object
      properties:
        title:
          type: string
          minLength: 1
          maxLength: 100
        description:
          type: string
          maxLength: 500
        status:
          type: string
          enum: [pending, in-progress, completed, cancelled]
        priority:
          type: string
          enum: [low, medium, high, urgent]
        dueDate:
          type: string
          format: date-time
        estimatedHours:
          type: number
        actualHours:
          type: number

    Category:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        description:
          type: string
        color:
          type: string
        icon:
          type: string
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

    CategoryCreate:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          minLength: 1
          maxLength: 50
        description:
          type: string
          maxLength: 200
        color:
          type: string
          pattern: '^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$'
        icon:
          type: string

    UsersResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'
            pagination:
              $ref: '#/components/schemas/Pagination'

    UserResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/User'

    TasksResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            tasks:
              type: array
              items:
                $ref: '#/components/schemas/Task'
            pagination:
              $ref: '#/components/schemas/Pagination'

    TaskResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/Task'

    CategoriesResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            categories:
              type: array
              items:
                $ref: '#/components/schemas/Category'
            pagination:
              $ref: '#/components/schemas/Pagination'

    CategoryResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/Category'

    AnalyticsResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          type: object
          properties:
            overview:
              type: object
            taskStats:
              type: object
            userStats:
              type: object

    Pagination:
      type: object
      properties:
        currentPage:
          type: integer
        totalPages:
          type: integer
        totalTasks:
          type: integer
        hasNext:
          type: boolean
        hasPrev:
          type: boolean

    Error:
      type: object
      properties:
        error:
          type: string
        message:
          type: string
        details:
          type: array
          items:
            type: string